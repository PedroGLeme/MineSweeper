#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <windows.h>
#include <conio.h>

  int lin, col, nrobomb;
  char  sqr[100][100];
  long int pos_x, pos_y;
  long int POSX, POSY;
  int verificacao= 1;
  float T0 ;
  char Nomejogador[5];

  typedef struct Nomes
  {
      char nome[5];
      float pontuation;
  }t_player;

  t_player player[10];

  FILE *ARQop;

void vfy(int i, int j) // funcao de verificacao se onde o jogador clicou possui ou nao uma bomba
{
    if(sqr[i][j]== '*' || sqr[i][j]== 'P')
    {
        verificacao= 0;
    }else
        bombasadj(i,j);
}

void lermouse() // le a posicao do mouse e ve se ele quer revelar ou posicionar uma bandeira
{
    POINT cursorPosition;
    while(1)
    {
        if ((GetKeyState(VK_LBUTTON) & 0x80) != 0) // revela posicao
        {
            while((GetKeyState(VK_LBUTTON) & 0x80) != 0)
                Sleep(0.1);

            GetCursorPos(&cursorPosition);
            pos_x= cursorPosition.x; // posicao em x e y em pixels
            pos_y= cursorPosition.y;
                for (int i=0; i<lin; i++)
                {
                    for (int j=0; j<col; j++)
                    {
                        if((pos_x>(10 + j*(75)))&&(pos_x<(33 + j*(75)))&&(pos_y>(60 + i*(58)))&&(pos_y<(79 + i*(58))))
                        {
                            if(sqr[i][j]== 'P')
                            {
                                printf(" tire a bandeira para interagir com o espaço\n");
                                sleep(3);
                                break;
                            }
                            else
                            {
                                vfy(i,j); // funcao de verificacao se a posicao escolhida possui uma bomba ou nao
                                break;
                            }
                        }
                    }
                }
            break;
        }
         if ((GetKeyState(VK_RBUTTON) & 0x80) != 0) // posiciona a bandeira
        {
            while((GetKeyState(VK_RBUTTON) & 0x80) != 0)
                Sleep(0.1);

            GetCursorPos(&cursorPosition);
            pos_x= cursorPosition.x; // posicao em x e y em pixels
            pos_y= cursorPosition.y;
             for (int i=0; i<lin; i++)
                {
                    for (int j=0; j<col; j++)
                    {
                        if((pos_x>(10 + j*(75)))&&(pos_x<(33 + j*(75)))&&(pos_y>(60 + i*(58)))&&(pos_y<(79 + i*(58))))
                        {
                        if(sqr[i][j]== 'P')
                        {
                            sqr[i][j]= ' '; // retira a bandeira
                        }
                        else
                        {
                            sqr[i][j]='P'; // posiciona a bandeira
                        }
                        break;
                        }
                    }
                }
            break;
        }
    }
}

void bomba()  // funcao de definicao de posicao de bombas aleatoria
{
    srand(time(NULL));
    int i,b,a;
    for(i=0;i<nrobomb;i++)
    {
        b=rand()%(col);
        a=rand()%(lin);
        sqr[a][b]= '*';
    }
}

void campo_final()// campo que revela a posicao das bombas
{
    int a, b;
    for (a=0; a<lin; a++)
    {
        printf("\n");
            for(b=0;b<col; b++)
            {
                printf("|%c|\t", sqr[a][b]);
            }
        printf("\n \n");
    }
}

void campo() // disposicao do campo com as bombas em icognita e mostrando os espacos liberados
{
    int a, b;
    for (a=0; a<lin; a++)
    {
        printf("\n");
            for(b=0;b<col; b++)
            {
                if(sqr[a][b]== '*')
                {
                    printf("| |\t");
                }else
                    printf("|%c|\t", sqr[a][b]);
            }
        printf("\n \n");
    }
}

void printa_campo() // campo inicial e disposicao das bombas
{
    int a, b;
    for (a=0; a<lin; a++)
    {
        printf("\n");
            for(b=0;b<col; b++)
            {
            sqr[a][b]= ' ';
            printf("|%c|\t", sqr[a][b]);
            }

        printf("\n \n");
    }
    bomba();  // funcao de definicao de posicao de bombas aleatoria
}

void vitoria() // funcao de vitoria
{
    int a, b, c;
    int i, j, k;
    k=0;
    float pont;
    int seg;
    int cont = (lin*col);
    for(a=0; a<lin ; a++)
    {
        for(b=0; b<col; b++)
        {
            if(sqr[a][b]== ' ') // se existir algum espaco vazio, o jogo ainda nao terminou
            {
                cont--;
            }
        }
    }
    if(cont== (lin*col)) // se o contador nao encontrar espacos vazios ele sera igual ao espaco do campo, entrando na condicao de vitoria
    {
        system("cls");
        campo_final();
        printf("jogo acabou voce venceu\n");
        clock_t TF = clock();
        float seconds = (float)(TF - T0) / CLOCKS_PER_SEC;
        for(a=0; a<lin; a++)
        {
            for(b=0; b<col; b++)
            {
                for(c=0; c<=6; c++)
                {
                    if(sqr[a][b]== c+'0')
                    {
                        cont++;
                    }
                }
            }
        }
        pont = (cont)*10;
        printf("TEMPO DE JOGO:%f\n", seconds);
        seg = seconds;
        pont = pont + (1000 - seg);
        printf("PONTUACAO: %f", pont);
        player[5].pontuation= pont;
        strcpy( player[5].nome, Nomejogador);

        ARQop = fopen("Score.txt", "at");
          if (ARQop==NULL)
            {
                printf("\n## Erro na abertura do arquivo...\n\n");
                exit(-1);
            }
        for (i=0; i<6; ++i)
            {
            for (j=i+1; j<6; ++j)
                {
                if (player[i].pontuation > player[j].pontuation)
                    {
                    k = player[i].pontuation;
                    player[i].pontuation = player[j].pontuation;
                    player[j].pontuation = k;
                    }
                }
            }
    printf ("\n TOP SCORES \n");
    for (i=4; i>=0; i--)
    {
        printf (" %f \n", player[i].pontuation);
    }
        fprintf(ARQop, "%s %f \n", Nomejogador, pont);
        exit (1);
    }
}

void Facil()
{
    lin=9;
    col=9;
    nrobomb=10;
    bomba();  // funcao de definicao de posicao de bombas aleatoria
}

void Medio()
{
    lin=14;
    col=16;
    nrobomb= 40;
    bomba();  // funcao de definicao de posicao de bombas aleatoria
}

void Dificil()
{
    lin=14;
    col=23;
    nrobomb=60;
    bomba();  // funcao de definicao de posicao de bombas aleatoria
}

void Custom() // jogo costumizado
{
    int a = 1;
    printf("de linha e coluna\n limite: 14X23");
    while(a)
    {
       scanf("%d", &lin);
       if(lin>14)
       {
           printf("ERRO: Forneça outro valor de linhas\n");
       }
       else a=0;
    }
    a=1;
       while(a)
    {
       scanf("%d", &col);
       if(lin>14)
       {
           printf("ERRO: Forneça outro valor de colunas\n");
       }
       else a=0;
    }
    nrobomb= ((lin)*(col))/6;
    bomba(); // funcao de definicao de posicao de bombas aleatoria
}

void RecordFILE() //abre o arquivo e pega dele as 5 maiores pontuacoes
{
    int i;

    ARQop = fopen("score.txt", "rt");
      if (ARQop==NULL)
    {
        printf("NAO HA PONTUACOES GRAVADAS\n\n");
    }
    else
    {
        for(i=0; i<5; i++)
        {
            fscanf(ARQop, " %s %f", player[i].nome, &player[i].pontuation);
        }
    }
    fclose(ARQop);

}

void dificuldade() // selecao da dificuldade
{
    int dif;
    printf("selecione dificuldade 1-4\n");
    scanf("%d", &dif);
    if(dif== 1)
    {
        Facil();
    }
    if(dif==2)
    {
        Medio();
    }
    if(dif==3)
    {
        Dificil();
    }
    if(dif==4)
    {
        Custom();
    }
}
void bombasadj(int x, int y) // funcao recursiva de abre em volta, ela dispoe no espaco quantas bombas existem proximas aquele espaco
{
    int i,j,nb;
    nb=0;
    for(i=-1;i<=1;i++)
    {
        for(j=-1;j<=1;j++)
        {
            if(sqr[x+i][y+j]=='*')
            {
                nb++;
            }
        }
    }
    sqr[x][y] = nb+'0';
    if (sqr[x][y] == '0')
    {
        for(i=-1;i<=1;i++)
        {
            for(j=-1;j<=1;j++)
            {
                if(x+i>=0 && x+i<=lin && y+j>=0 && y+j<=col)
                    abre_em_volta(x+i, y+j);
            }
        }
    }
}
void abre_em_volta(int x, int y) // funcao recursiva que depende de bombas adjascentes, e e acionada ate encontrat um numero
{
    if(sqr[x][y]!='0')
    bombasadj(x,y);
}


int main()
{
    int a, b, c, k;
    int cont=0;
    float pont=0;
    int seg;
    printf("############################\n");
    printf("         CAMPO MINADO             \n");  // Disposicao da interface de jogo
    printf("############################\n");
    printf("Lembrete: JOGUE EM TELA CHEIA \n");
    printf("Botao esquerdo: seleciona o espaco do mause |||| Botao direito: posiciona uma bandeira no local do mause\n"); //Regras
    printf("NOME DO JOGADOR ( 3 letras ): \t");
    scanf("%s", Nomejogador); // Nome do jogador para ser inserido no arquivo e associar a esse nome a pontuacao atingida

    RecordFILE(); // abre um arquivo para leitura, ja ou nao existente, para dispor os 5 maiores

    dificuldade(); // selecao da dificuldade de jogo
    system("cls");
    clock_t T0 = clock(); // inicia o tempo para multiplicador de pontuaçao ao final do jogo caso tenha vitoria
    printa_campo(); // funcao para a criacao e disposicao das bombas

    while(verificacao)
    {
        system("cls");
        campo();
        lermouse(); //le cliques e posicao do mouse
        vitoria();//testa para a vitoria
    }
    if(verificacao==0) // retorno obtido dentro da funcao lermouse onde o retorno 0 indica que a posicao escolhida pelo jogador tinha uma bomba
    {
        system("cls");
        campo_final(); // mostra a posicao das bombas
        printf("jogo acabou achou bomba\n");
        clock_t TF = clock(); // finaliza o contador de tempo
        float seconds = (float)(TF - T0) / CLOCKS_PER_SEC;
        for(a=0; a<lin; a++)
        {
            for(b=0; b<col; b++)
            {
                for(c=0; c<=6; c++)
                {
                    if(sqr[a][b]== c+'0')
                    {
                        cont++; // contador de quantos espacos foram liberados
                    }
                }
            }
        }
        pont = (cont)*10;
        printf("TEMPO DE JOGO:%f\n", seconds);
        seg = seconds;
        printf("PONTUACAO: %f", pont); // pontuacao sem o bonus de tempo decorrente da derrota
        player[5].pontuation= pont;
        strcpy( player[5].nome, Nomejogador);

             ARQop = fopen("Score.txt", "at");
          if (ARQop==NULL)
            {
                printf("\n## Erro na abertura do arquivo...\n\n");
                exit(-1);
            }
        for (int i=0; i<6; ++i)
            {
            for (int j=i+1; j<6; ++j)
                {
                if (player[i].pontuation > player[j].pontuation) // disposicao das pontuacoes do arquivo e do jogador em ordem decrescente
                    {
                    k = player[i].pontuation;
                    player[i].pontuation = player[j].pontuation;
                    player[j].pontuation = k;
                    }
                }
            }
    printf ("\n TOP SCORES \n");
    for (int i=4; i>=0; i--) // mostra as 5 maiores pontuacoes
    {
        printf ("%f \n", player[i].pontuation);
    }
        fprintf(ARQop, "%s %f \n", Nomejogador, pont); // salva no arquivo os dados do jogador novo
        exit (2);
    }

    return 0;
}
